package org.example;

import org.example.weather.WeatherApp;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import static org.example.Dictionaries.arrivalStationMap;
import static org.example.Dictionaries.translatedCitiesMap;

public class BotEngine extends TelegramLongPollingBot {
    private static final String botUserName = "–ü–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤";
    private static final String token = "5328248497:AAGMCitu_3E_sZ5sKVheqAllqAIsD__XGeI";
    private String chatId;
    private String userName = "";
    private Integer messageId;

    private final Map<String, Consumer<String>> callbackHandlersCityWeather = new HashMap<>();
    private final Map<String, Runnable> callbackHandlersToStation = new HashMap<>();
    private final Map<String, Runnable> callbackHandlers = new HashMap<>();

    private void initCallbackHandlersCityWeather() {
        callbackHandlersCityWeather.putAll(Map.of(
                "WeatherSamara", this::sendWeatherMessage,
                "WeatherNovokybishevsk", this::sendWeatherMessage
        ));
    }

    private void initCallbackHandlersToStation() {
        callbackHandlersToStation.putAll(Map.of(
                "FromSamara", () -> editInlineKeyBoardMessage("C—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è", KeyboardButton.InlineKeyboardChooseArrivalSamara),
                "FromMirnaya", () -> editInlineKeyBoardMessage("C—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è", KeyboardButton.InlineKeyboardChooseArrivalMirnaya),
                "FromLipyagi", () -> editInlineKeyBoardMessage("C—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è", KeyboardButton.InlineKeyboardChooseArrivalLipyagi),
                "FromSrednevolzhskaya", () -> editInlineKeyBoardMessage("C—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è", KeyboardButton.InlineKeyboardChooseArrivalSrednevolzhskaya)
        ));
    }

    private void initCallbackHandlers() {
        callbackHandlers.putAll(Map.of(
                "WeatherApp", () -> editInlineKeyBoardMessage("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", KeyboardButton.InlineKeyboardChooseCity),
                "TabletimeFrom", () -> editInlineKeyBoardMessage("C—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", KeyboardButton.InlineKeyboardChooseDeparture),
                "ToMirnaya", () -> sendRasp(Properties.getName_from(), "–ú–∏—Ä–Ω–∞—è"),
                "ToSamara", () -> sendRasp(Properties.getName_from(), "–°–∞–º–∞—Ä–∞"),
                "ToLipyagi", () -> sendRasp(Properties.getName_from(), "–õ–∏–ø—è–≥–∏"),
                "ToSrednevolzhskaya", () -> sendRasp(Properties.getName_from(), "–°—Ä–µ–¥–Ω–µ–≤–æ–ª–∂—Å–∫–∞—è")
        ));
    }

    BotEngine() {
        super(token);
        initCallbackHandlersCityWeather();
        initCallbackHandlersToStation();
        initCallbackHandlers();
    }

    @Override
    public String getBotUsername() {
        return botUserName;
    }

    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            sendFirstMessage(update.getMessage());
        }
        if (update.hasCallbackQuery()) {
            processCallbackQuery(update.getCallbackQuery());
            chatId=update.getCallbackQuery().getMessage().getChatId().toString();
        }
    }

    private void sendFirstMessage(Message message) {
        userName = message.getFrom().getFirstName();
        chatId = message.getChatId().toString();
        SendMessage sendMessage=new SendMessage(chatId,"–í—ã–±–µ—Ä–∏—Ç–µ  –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
        sendMessage.setReplyMarkup(KeyboardButton.InlineKeyboardChooseCategory);
        try {
            messageId=execute(sendMessage).getMessageId();
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        //sendInlineKeyBoardMessage("–í—ã–±–µ—Ä–∏—Ç–µ  –∫–∞—Ç–µ–≥–æ—Ä–∏—é", KeyboardButton.InlineKeyboardChooseCategory);
    }

    private void processCallbackQuery(CallbackQuery callbackQuery) {
        //–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (callbackHandlers.containsKey(callbackQuery.getData())) {
            callbackHandlers.get(callbackQuery.getData()).run();
            //if(Objects.equals(callbackQuery.getData(), "WeatherApp")) messageId=callbackQuery.getMessage().getMessageId();
        }
        //–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–∞—Ö
        if (callbackHandlersCityWeather.containsKey(callbackQuery.getData())) {
            callbackHandlersCityWeather.get(callbackQuery.getData()).accept(translatedCitiesMap.get(callbackQuery.getData()));
        }
        //–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if (callbackHandlersToStation.containsKey(callbackQuery.getData())) {
            callbackHandlersToStation.get(callbackQuery.getData()).run();
            Properties.setName_from(arrivalStationMap.get(callbackQuery.getData()));
        }
    }

    private void sendWeatherMessage(String cityName) {
        Properties.setNameCity(cityName);
        WeatherApp.displayWeatherInfo();
        String weather = timeOfDay() +
                "\n\n–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ " + Properties.getCondition() +
                "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ " + Dictionaries.declinationCityMap.get(cityName) + ": " + Math.round(Properties.getTempOfCity()) +
                " ¬∞C\n–í–µ—Ç–µ—Ä " + Properties.getWind() + " –º/—Å" +
                createWeatherStr(Properties.getS()) + "\n\n" +
                Properties.getWeatherMessage();
        SendMessage sendMessage = new SendMessage(chatId, weather);
        try {
            //—Ö–æ—á—É —á—Ç–æ–±—ã —Ç—É—Ç –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å id –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å FIFO
            int weather_message=execute(sendMessage).getMessageId();
            //–ò —Å–ø—É—Å—Ç—è 5 –º–∏–Ω—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è–ª–∏—Å—å
            DeleteMessage deleteMessage=new DeleteMessage(chatId,weather_message);
        } catch (TelegramApiException e) {
            throw new RuntimeException("Failed to send weather message", e);
        }
        editInlineKeyBoardMessage("–í—ã–±–µ—Ä–∏—Ç–µ  –∫–∞—Ç–µ–≥–æ—Ä–∏—é", KeyboardButton.InlineKeyboardChooseCategory);
    }

    private void sendRasp(String station1, String station2) {
        StringBuilder stringBuilder = new StringBuilder();
        try {
            try {
                Rasp.rasp(station1, station2);
                stringBuilder.append(timeOfDay()).append("\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ").append(station1).append("üöÇ").append(" - ").append(station2).append("üöÇ").append("\n\n").append(Properties.str);
            } catch (Exception e) {
                execute(new SendMessage(chatId, "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫"));
            }
            execute(new SendMessage(chatId, stringBuilder.toString()));
        } catch (TelegramApiException e) {
            throw new RuntimeException("Failed to send rasp message", e);
        }
        editInlineKeyBoardMessage("–í—ã–±–µ—Ä–∏—Ç–µ  –∫–∞—Ç–µ–≥–æ—Ä–∏—é", KeyboardButton.InlineKeyboardChooseCategory);
    }

    private void editInlineKeyBoardMessage(String text, InlineKeyboardMarkup inlineKeyboardMarkup) {
        EditMessageText editMessageText = new EditMessageText(text);
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setReplyMarkup(inlineKeyboardMarkup);
        try {
            execute(editMessageText);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private static String createWeatherStr(List<String> weather) {
        StringBuilder stringBuilder = new StringBuilder();
        for (String s : weather) {
            switch (s) {
                case "morning" ->
                        stringBuilder.append("\n–£—Ç—Ä–æ: ").append(Properties.getMorning_t()).append("¬∞C ").append(Properties.getMorning_cond());
                case "day" ->
                        stringBuilder.append("\n–î–µ–Ω—å: ").append(Properties.getDay_t()).append("¬∞C ").append(Properties.getDay_cond());
                case "evening" ->
                        stringBuilder.append("\n–í–µ—á–µ—Ä: ").append(Properties.getEvening_t()).append("¬∞C ").append(Properties.getEvening_cond());
                case "night" ->
                        stringBuilder.append("\n–ù–æ—á—å: ").append(Properties.getNight_t()).append("¬∞C ").append(Properties.getNight_cond());
            }
        }
        return stringBuilder.toString();
    }

    private String timeOfDay() {
        final int endOneNight = (6 * 60) * 60;
        final int startMorning = (6 * 60) * 60 + 1;
        final int endMorning = (12 * 60) * 60;
        final int startDay = (12 * 60) * 60 + 1; // –î–µ–Ω—å - —Å—Ä–µ–¥–∏–Ω–∞ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ 12:00
        final int endDay = (18 * 60) * 60;
        final int startEvening = (18 * 60) * 60 + 1;
        final int endEvening = (24 * 60) * 60 - 1;
        final int startTwoNight = 0; //(0 * 60) * 60; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ = DateTime.MaxValue = 86399
        // –ë–µ–∑ —Å–µ–∫—É–Ω–¥—ã –ø–æ–ª–Ω–æ—á—å
        // –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏: const int EndTwoNight = (24 * 60) * 60 - 1;

        LocalTime nowTime = LocalTime.now();
        int seconds = nowTime.toSecondOfDay();

        if (seconds <= endOneNight && seconds >= startTwoNight) {
            return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, –∞ –ø–æ—Ç–∏–º—É –µ—â—ë –Ω–µ —Å–ø–∏–º\n–í—Å–µ –∫–æ—à–µ—á–∫–∏ –∏ –∫–æ—Ç–∏–∫–∏ —É–∂–µ –¥–∞–≤–Ω–æ —Å–ø—è—Ç";
        } else if (seconds >= startMorning && seconds <= endMorning) {
            return "–ü—Ä–æ—Å–Ω—É–ª–∏—Å—å, —É–ª—ã–±–Ω—É–ª–∏—Å—å\n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –∏–¥—ë–º —á–∏—Å—Ç–∏—Ç—å –∑—É–±–∫–∏ –∏ –∏–¥—ë–º –∫—É—à–∞—Ç—å";
        } else if (seconds >= startDay && seconds <= endDay) {
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, " + userName;
        } else if (seconds >= startEvening && seconds <= endEvening) {
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, " + userName;
        }
        return "";
    }
}